# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TransbankWrap
else:
    import _TransbankWrap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ParamInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_TransbankWrap.ParamInfo_index_get, _TransbankWrap.ParamInfo_index_set)
    length = property(_TransbankWrap.ParamInfo_length_get, _TransbankWrap.ParamInfo_length_set)

    def __init__(self):
        _TransbankWrap.ParamInfo_swiginit(self, _TransbankWrap.new_ParamInfo())
    __swig_destroy__ = _TransbankWrap.delete_ParamInfo

# Register ParamInfo in _TransbankWrap:
_TransbankWrap.ParamInfo_swigregister(ParamInfo)

class BaseResponse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    function = property(_TransbankWrap.BaseResponse_function_get, _TransbankWrap.BaseResponse_function_set)
    responseCode = property(_TransbankWrap.BaseResponse_responseCode_get, _TransbankWrap.BaseResponse_responseCode_set)
    commerceCode = property(_TransbankWrap.BaseResponse_commerceCode_get, _TransbankWrap.BaseResponse_commerceCode_set)
    terminalId = property(_TransbankWrap.BaseResponse_terminalId_get, _TransbankWrap.BaseResponse_terminalId_set)
    initilized = property(_TransbankWrap.BaseResponse_initilized_get, _TransbankWrap.BaseResponse_initilized_set)

    def __init__(self):
        _TransbankWrap.BaseResponse_swiginit(self, _TransbankWrap.new_BaseResponse())
    __swig_destroy__ = _TransbankWrap.delete_BaseResponse

# Register BaseResponse in _TransbankWrap:
_TransbankWrap.BaseResponse_swigregister(BaseResponse)

class TotalsCResponse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    function = property(_TransbankWrap.TotalsCResponse_function_get, _TransbankWrap.TotalsCResponse_function_set)
    responseCode = property(_TransbankWrap.TotalsCResponse_responseCode_get, _TransbankWrap.TotalsCResponse_responseCode_set)
    txCount = property(_TransbankWrap.TotalsCResponse_txCount_get, _TransbankWrap.TotalsCResponse_txCount_set)
    txTotal = property(_TransbankWrap.TotalsCResponse_txTotal_get, _TransbankWrap.TotalsCResponse_txTotal_set)
    initilized = property(_TransbankWrap.TotalsCResponse_initilized_get, _TransbankWrap.TotalsCResponse_initilized_set)

    def __init__(self):
        _TransbankWrap.TotalsCResponse_swiginit(self, _TransbankWrap.new_TotalsCResponse())
    __swig_destroy__ = _TransbankWrap.delete_TotalsCResponse

# Register TotalsCResponse in _TransbankWrap:
_TransbankWrap.TotalsCResponse_swigregister(TotalsCResponse)

class RefundCResponse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    function = property(_TransbankWrap.RefundCResponse_function_get, _TransbankWrap.RefundCResponse_function_set)
    responseCode = property(_TransbankWrap.RefundCResponse_responseCode_get, _TransbankWrap.RefundCResponse_responseCode_set)
    commerceCode = property(_TransbankWrap.RefundCResponse_commerceCode_get, _TransbankWrap.RefundCResponse_commerceCode_set)
    terminalId = property(_TransbankWrap.RefundCResponse_terminalId_get, _TransbankWrap.RefundCResponse_terminalId_set)
    authorizationCode = property(_TransbankWrap.RefundCResponse_authorizationCode_get, _TransbankWrap.RefundCResponse_authorizationCode_set)
    operationID = property(_TransbankWrap.RefundCResponse_operationID_get, _TransbankWrap.RefundCResponse_operationID_set)
    initilized = property(_TransbankWrap.RefundCResponse_initilized_get, _TransbankWrap.RefundCResponse_initilized_set)

    def __init__(self):
        _TransbankWrap.RefundCResponse_swiginit(self, _TransbankWrap.new_RefundCResponse())
    __swig_destroy__ = _TransbankWrap.delete_RefundCResponse

# Register RefundCResponse in _TransbankWrap:
_TransbankWrap.RefundCResponse_swigregister(RefundCResponse)


def list_ports():
    return _TransbankWrap.list_ports()

def get_port_name(port):
    return _TransbankWrap.get_port_name(port)

def read_bytes(port, buf, message):
    return _TransbankWrap.read_bytes(port, buf, message)

def read_ack(port):
    return _TransbankWrap.read_ack(port)

def calculate_lrc(message, length):
    return _TransbankWrap.calculate_lrc(message, length)

def reply_ack(port, message, length):
    return _TransbankWrap.reply_ack(port, message, length)

def write_message(port, message):
    return _TransbankWrap.write_message(port, message)
TBK_OK = _TransbankWrap.TBK_OK
TBK_NOK = _TransbankWrap.TBK_NOK

def open_port(portName, baudrate):
    return _TransbankWrap.open_port(portName, baudrate)

def sale(amount, ticket, send_messages):
    return _TransbankWrap.sale(amount, ticket, send_messages)

def last_sale():
    return _TransbankWrap.last_sale()

def close_end():
    return _TransbankWrap.close_end()

def load_keys():
    return _TransbankWrap.load_keys()

def get_totals():
    return _TransbankWrap.get_totals()

def poll():
    return _TransbankWrap.poll()

def set_normal_mode():
    return _TransbankWrap.set_normal_mode()

def close_port():
    return _TransbankWrap.close_port()

def refund(transactionID):
    return _TransbankWrap.refund(transactionID)

def sales_detail(print_on_pos):
    return _TransbankWrap.sales_detail(print_on_pos)


